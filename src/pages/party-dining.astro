---
import '../styles/party-dining.css';
---
<head>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
</head>
<body>
    <div class="fullscreen-container">
        <div class="content-wrapper">
            <div class="page" id="party-calculation">
                <button class="btn-back" onclick="window.location.href='/'">Back</button>

                <h1>Party Bill for <span id="party-members-display"></span></h1>

                <div class="items-section">
                    <h3>Items Management</h3>
                    
                    <div class="add-item-form">
                        <div class="form-group">
                            <label for="item-name">Item Name</label>
                            <input type="text" id="item-name" placeholder="e.g., Burger, Pizza">
                        </div>
                        <div class="form-group price-input">
                            <label for="item-price">Price ($)</label>
                            <input type="number" id="item-price" placeholder="0.00" step="0.01" min="0">
                        </div>
                        <div class="form-group">
                            <button class="btn-success" onclick="addItem()">+ Add</button>
                        </div>
                    </div>

                    <div class="items-list" id="items-list">
                        <!-- Items will be dynamically added here -->
                    </div>
                </div>

                <div class="tax-tip-section">
                    <div class="tax-section">
                        <h3>Tax Rate</h3>
                        <div class="form-group">
                            <label for="tax-rate">Tax Percentage (%)</label>
                            <input type="number" id="tax-rate" value="10.75" step="0.01" min="0" max="100" onchange="updateCalculations()">
                        </div>
                    </div>

                    <div class="tip-section">
                        <h3>Tip</h3>
                        <div class="tip-options">
                            <div class="tip-option" onclick="selectTip(15)">15%</div>
                            <div class="tip-option selected" onclick="selectTip(18)">18%</div>
                            <div class="tip-option" onclick="selectTip(20)">20%</div>
                        </div>
                        <div class="form-group">
                            <label for="custom-tip">Custom Tip (%)</label>
                            <input type="number" id="custom-tip" placeholder="Enter custom %" step="0.01" min="0" onchange="selectCustomTip()">
                        </div>
                    </div>
                </div>

                <div class="receipt">
                    <div class="receipt-header">
                        <h2>BILL RECEIPT</h2>
                        <p>Party Dining Split</p>
                        <p id="receipt-date"></p>
                    </div>
                    
                    <div id="receipt-items">
                        <p style="text-align: center; color: #666; font-style: italic;">No items added yet</p>
                    </div>
                    
                    <div class="receipt-totals" id="receipt-totals" style="display: none;">
                        <div class="total-line">
                            <span>Subtotal:</span>
                            <span id="subtotal">$0.00</span>
                        </div>
                        <div class="total-line">
                            <span>Tax (<span id="tax-display">10.75</span>%):</span>
                            <span id="tax-amount">$0.00</span>
                        </div>
                        <div class="total-line">
                            <span>Tip (<span id="tip-display">18</span>%):</span>
                            <span id="tip-amount">$0.00</span>
                        </div>
                        <div class="total-line final-total">
                            <span>TOTAL:</span>
                            <span id="final-total">$0.00</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        let billItems = [];
        let currentTipPercentage = 18;
        let itemIdCounter = 1;

        // Initialize when this page becomes active
        function initializePartyCalculation() {
            updatePartyMembersDisplay();
            updateReceiptDate();
        }

        function updatePartyMembersDisplay() {
            const display = document.getElementById('party-members-display');
            if (display && typeof partyMembers !== 'undefined') {
                display.textContent = partyMembers.join(', ');
            }
        }

        function updateReceiptDate() {
            const dateElement = document.getElementById('receipt-date');
            if (dateElement) {
                const now = new Date();
                const dateStr = now.toLocaleDateString() + ' ' + now.toLocaleTimeString();
                dateElement.textContent = dateStr;
            }
        }

        function addItem() {
            const nameInput = document.getElementById('item-name');
            const priceInput = document.getElementById('item-price');
            
            const name = nameInput.value.trim();
            const price = parseFloat(priceInput.value) || 0;
            
            if (!name || price <= 0) {
                alert('Please enter a valid item name and price.');
                return;
            }
            
            // Create new item
            const newItem = {
                id: itemIdCounter++,
                name: name,
                price: price,
                assignedTo: [] // Array of member names
            };
            
            billItems.push(newItem);
            
            // Clear form
            nameInput.value = '';
            priceInput.value = '';
            
            // Update display
            renderItemsList();
            updateCalculations();
        }

        function renderItemsList() {
            const container = document.getElementById('items-list');
            if (!container || typeof partyMembers === 'undefined') return;
            
            if (billItems.length === 0) {
                const emptyMessage = document.createElement('p');
                emptyMessage.style.color = 'rgba(255, 255, 255, 0.6)';
                emptyMessage.style.textAlign = 'center';
                emptyMessage.style.fontStyle = 'italic';
                emptyMessage.textContent = 'No items added yet';
                container.innerHTML = '';
                container.appendChild(emptyMessage);
                return;
            }
            
            container.innerHTML = '';
            
            billItems.forEach(item => {
                // Create item card
                const itemCard = document.createElement('div');
                itemCard.className = 'item-card';
                
                // Create item header
                const itemHeader = document.createElement('div');
                itemHeader.className = 'item-header';
                
                // Create item info
                const itemInfo = document.createElement('div');
                itemInfo.className = 'item-info';
                
                const itemTitle = document.createElement('h4');
                itemTitle.textContent = item.name;
                
                const itemPrice = document.createElement('p');
                itemPrice.textContent = `$${item.price.toFixed(2)}`;
                
                itemInfo.appendChild(itemTitle);
                itemInfo.appendChild(itemPrice);
                
                // Create delete button
                const deleteButton = document.createElement('button');
                deleteButton.className = 'btn-delete';
                deleteButton.textContent = 'Remove';
                deleteButton.onclick = () => removeItem(item.id);
                
                itemHeader.appendChild(itemInfo);
                itemHeader.appendChild(deleteButton);
                
                // Create assignment tags container
                const assignmentTags = document.createElement('div');
                assignmentTags.className = 'assignment-tags';
                
                // Create person tags
                partyMembers.forEach(member => {
                    const isAssigned = item.assignedTo.includes(member);
                    const personTag = document.createElement('button');
                    personTag.className = `person-tag ${isAssigned ? 'assigned' : 'unassigned'}`;
                    personTag.textContent = member;
                    personTag.onclick = () => togglePersonAssignment(item.id, member);
                    
                    assignmentTags.appendChild(personTag);
                });
                
                // Assemble the card
                itemCard.appendChild(itemHeader);
                itemCard.appendChild(assignmentTags);
                container.appendChild(itemCard);
            });
        }

        function togglePersonAssignment(itemId, memberName) {
            const item = billItems.find(item => item.id === itemId);
            if (!item) return;
            
            const index = item.assignedTo.indexOf(memberName);
            if (index > -1) {
                // Remove assignment
                item.assignedTo.splice(index, 1);
            } else {
                // Add assignment
                item.assignedTo.push(memberName);
            }
            
            renderItemsList();
            updateCalculations();
        }

        function removeItem(itemId) {
            billItems = billItems.filter(item => item.id !== itemId);
            renderItemsList();
            updateCalculations();
        }

        function updateReceipt() {
            const container = document.getElementById('receipt-items');
            if (!container || typeof partyMembers === 'undefined') return;
            
            // Only show items that have assignments
            const assignedItems = billItems.filter(item => item.assignedTo.length > 0);
            
            if (assignedItems.length === 0) {
                container.innerHTML = '<p style="text-align: center; color: #666; font-style: italic;">No items assigned yet</p>';
                document.getElementById('receipt-totals').style.display = 'none';
                return;
            }
            
            container.innerHTML = '';
            
            // Calculate totals for calculations
            const subtotal = assignedItems.reduce((sum, item) => sum + item.price, 0);
            const taxRate = parseFloat(document.getElementById('tax-rate').value) / 100;
            const taxAmount = subtotal * taxRate;
            const tipAmount = subtotal * (currentTipPercentage / 100);
            
            // Group items by member
            const memberItems = {};
            const memberSubtotals = {};
            partyMembers.forEach(member => {
                memberItems[member] = [];
                memberSubtotals[member] = 0;
            });
            
            assignedItems.forEach(item => {
                const pricePerPerson = item.price / item.assignedTo.length;
                item.assignedTo.forEach(member => {
                    memberItems[member].push({
                        name: item.name,
                        price: pricePerPerson,
                        originalPrice: item.price,
                        sharedWith: item.assignedTo.length > 1 ? item.assignedTo.filter(m => m !== member) : null
                    });
                    memberSubtotals[member] += pricePerPerson;
                });
            });
            
            // Create receipt sections for each member who has items
            partyMembers.forEach(member => {
                if (memberItems[member].length > 0) {
                    const memberSection = document.createElement('div');
                    memberSection.className = 'receipt-item member-section';
                    
                    let itemsHTML = '';
                    
                    memberItems[member].forEach(item => {
                        const sharedText = item.sharedWith ? ` (shared with ${item.sharedWith.join(', ')})` : '';
                        itemsHTML += `
                            <div class="member-item">
                                <span>${item.name}${sharedText}</span>
                                <span>$${item.price.toFixed(2)}</span>
                            </div>
                        `;
                    });
                    
                    // Calculate member's proportional tax and tip
                    const memberProportion = memberSubtotals[member] / subtotal;
                    const memberTax = taxAmount * memberProportion;
                    const memberTip = tipAmount * memberProportion;
                    const memberTotal = memberSubtotals[member] + memberTax + memberTip;
                    
                    memberSection.innerHTML = `
                        <div class="member-header">
                            <span style="font-weight: bold; font-size: 1.1rem;">${member.toUpperCase()}</span>
                        </div>
                        <div class="member-items">
                            ${itemsHTML}
                        </div>
                        <div class="member-totals">
                            <div class="member-total-line">
                                <span>Subtotal:</span>
                                <span>$${memberSubtotals[member].toFixed(2)}</span>
                            </div>
                            <div class="member-total-line">
                                <span>Tax (${(taxRate * 100).toFixed(2)}%):</span>
                                <span>$${memberTax.toFixed(2)}</span>
                            </div>
                            <div class="member-total-line">
                                <span>Tip (${currentTipPercentage.toFixed(0)}%):</span>
                                <span>$${memberTip.toFixed(2)}</span>
                            </div>
                            <div class="member-total-line member-final-total">
                                <span><strong>${member} owes:</strong></span>
                                <span><strong>$${memberTotal.toFixed(2)}</strong></span>
                            </div>
                        </div>
                    `;
                    
                    container.appendChild(memberSection);
                }
            });
            
            document.getElementById('receipt-totals').style.display = 'block';
        }

        function updateCalculations() {
            const assignedItems = billItems.filter(item => item.assignedTo.length > 0);
            
            if (assignedItems.length === 0) {
                // Hide totals if no items assigned
                document.getElementById('receipt-totals').style.display = 'none';
                updateReceipt();
                return;
            }
            
            const subtotal = assignedItems.reduce((sum, item) => sum + item.price, 0);
            const taxRate = parseFloat(document.getElementById('tax-rate').value) / 100;
            const taxAmount = subtotal * taxRate;
            const tipAmount = subtotal * (currentTipPercentage / 100);
            const finalTotal = subtotal + taxAmount + tipAmount;
            
            // Update receipt totals
            document.getElementById('subtotal').textContent = `$${subtotal.toFixed(2)}`;
            document.getElementById('tax-display').textContent = (taxRate * 100).toFixed(2);
            document.getElementById('tax-amount').textContent = `$${taxAmount.toFixed(2)}`;
            document.getElementById('tip-display').textContent = currentTipPercentage.toFixed(0);
            document.getElementById('tip-amount').textContent = `$${tipAmount.toFixed(2)}`;
            document.getElementById('final-total').textContent = `$${finalTotal.toFixed(2)}`;
            
            // Update the receipt display to show individual totals
            updateReceipt();
        }

        function selectTip(percentage) {
            currentTipPercentage = percentage;
            
            // Update tip option styling
            document.querySelectorAll('.tip-option').forEach(option => {
                option.classList.remove('selected');
            });
            event.target.classList.add('selected');
            
            // Clear custom tip input
            document.getElementById('custom-tip').value = '';
            
            updateCalculations();
        }

        function selectCustomTip() {
            const customTip = parseFloat(document.getElementById('custom-tip').value);
            if (customTip >= 0) {
                currentTipPercentage = customTip;
                
                // Clear preset tip selections
                document.querySelectorAll('.tip-option').forEach(option => {
                    option.classList.remove('selected');
                });
                
                updateCalculations();
            }
        }

        // Make functions globally available
        (window as any).addItem = addItem;
        (window as any).togglePersonAssignment = togglePersonAssignment;
        (window as any).removeItem = removeItem;
        (window as any).selectTip = selectTip;
        (window as any).selectCustomTip = selectCustomTip;
        (window as any).updateCalculations = updateCalculations;
        (window as any).initializePartyCalculation = initializePartyCalculation;

        // Load party members data when the page loads
        document.addEventListener('DOMContentLoaded', function() {
            // Get party members from localStorage or use sample data
            const storedMembers = localStorage.getItem('partyMembers');
            if (storedMembers) {
                (window as any).partyMembers = JSON.parse(storedMembers);
            } else {
                // Sample data for testing
                (window as any).partyMembers = ['Alice', 'Bob', 'Charlie'];
                localStorage.setItem('partyMembers', JSON.stringify((window as any).partyMembers));
            }
            
            // Initialize the calculation page
            initializePartyCalculation();
            renderItemsList();
            
            const itemNameInput = document.getElementById('item-name');
            const itemPriceInput = document.getElementById('item-price');
            
            if (itemNameInput) {
                itemNameInput.addEventListener('keypress', function(e) {
                    if (e.key === 'Enter') {
                        if (itemPriceInput) itemPriceInput.focus();
                    }
                });
            }

            if (itemPriceInput) {
                itemPriceInput.addEventListener('keypress', function(e) {
                    if (e.key === 'Enter') {
                        addItem();
                    }
                });
            }
        });
    </script>
</body>
</html>